tcp_send_ack，这个函数有一个很让人感动的地方，就是当skb分配失败的时候，采用delay_ack的方式。
延迟多长时间呢：
#define TCP_DELACK_MAX	((unsigned)(HZ/5))	/* maximal time to delay before sending an ACK */
#define TCP_RTO_MAX	((unsigned)(120*HZ)) 
由于是硬编码，所以最大的情况下是120S，但是我们一般看到抓包显示的是200ms。
void tcp_send_ack(struct sock *sk)
{
	struct sk_buff *buff;

	/* If we have been reset, we may not send again. */
	if (sk->sk_state == TCP_CLOSE)
		return;

	tcp_ca_event(sk, CA_EVENT_NON_DELAYED_ACK);

	/* We are not putting this on the write queue, so
	 * tcp_transmit_skb() will set the ownership to this
	 * sock.
	 */
	buff = alloc_skb(MAX_TCP_HEADER, sk_gfp_atomic(sk, GFP_ATOMIC));/*分配内存失败，等一等，看待会是否有内存*/
	if (buff == NULL) {
		inet_csk_schedule_ack(sk);
		inet_csk(sk)->icsk_ack.ato = TCP_ATO_MIN;
		inet_csk_reset_xmit_timer(sk, ICSK_TIME_DACK,
					  TCP_DELACK_MAX, TCP_RTO_MAX);
		return;
	}

分配内存失败之后，按道理这么短的时间，应该失败的概率也很大，但linux还是做了一次尝试，一方面由于单独一个ack
确实比较划不来，延迟的目的最大的原因还是跟本端发送的数据一起发送，所谓带数据的ack就是如此。另一方面，
由于使用的是GFP_ATOMIC分配内存，在内存紧张时分配也确实有可能失败的。
